Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

思路：本题题意为合并重合的区间。一开始觉得这个题目很像之前看过的一个博客：判断两矩形是否交叉。感觉是它的一维问题
链接http://blog.csdn.net/zyxlsh/article/details/5937191。后来发现考虑多了，其实只要考虑前一个的end和后一个的start 的关系就可以
判断他们是否重合，当然前提是需要对这些区间先按start的大小排序。
另外一开始是直接在原容器中进行修改，但是这样会有迭代器失效的问题。而且删除一个元素后后面的都会往前移动，时间复杂度比较高。
所以我们新建一个容器用于存储结果，再建一个临时的元素用于存放正在比较的区间。

代码如下：
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
bool isEarlierThan(const Interval &int1, const Interval &int2){
    return int1.start < int2.start;
}
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        if(intervals.size() <= 1) return intervals;

        sort(intervals.begin(),intervals.end(),isEarlierThan);
        vector<Interval> result;
        Interval temp = intervals[0];
        for(int i = 1; i < intervals.size(); ++i) {
            if(temp.end < intervals[i].start) {
                result.push_back(temp);
                temp = intervals[i];
            }
            else {
                if(temp.end < intervals[i].end) {
                    temp.end = intervals[i].end;
                }
            }
        }
        result.push_back(temp);  //最后一个没有存，需要再存放入结果中
        
        return result;
    }
};
