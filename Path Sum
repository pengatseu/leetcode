Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

代码如下
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode *root, int sum) {
    vector<int> all_path;
    int temp_sum = 0;
    find_all_path(root,temp_sum,all_path);
    for(vector<int>::iterator i = all_path.begin();i != all_path.end();i++)
    {
        if(*i == sum)
            return true; 
    }
    return false;
    }
private:
    int find_all_path(TreeNode *r, int temp_sum, vector<int>& a)
    {
        if(r == NULL) return 0;
        if(r->left == NULL && r->right == NULL)
        {
            a.push_back(temp_sum+r->val);
        
            return 0;
        }
        return find_all_path(r->left, temp_sum+r->val, a)+find_all_path(r->right, temp_sum+r->val, a);
    }
};
