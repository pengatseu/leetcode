Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

思路：一开始想的是先遍历一次，找到存放的位置，再遍历一次，同时开始合并，合并的思路参考Merge Intervals。
但是这样时间复杂度高，而且这里intervals的特征是：non-overlapping且以start的值拍好序了。
后来参考了http://fisherlei.blogspot.com/2012/12/leetcode-insert-interval.html的思路，只遍历一次。
遍历的时候判断当前迭代器值与newInterval的关系，如果当前interval小于newinterval，即i->end < newInterval.start，则插入该interval，
如果当前interval大于newInterval，即i->start > newInterval.end，说明i后面的都可以直接放在结果中，故先插入newInterval后，
将后面的放入结果中。如果覆盖（不属于上面两个情况的说明newInterval与当前的interval覆盖了），则将覆盖合并后的新值放入newInterval中。
并返回。
注意如果循环正常结束，则需要将newInterval放入结果后返回。原因见下面注释。

遍历Intervals的顺序一定先是情况1，即当前interval小于newinterval，此时将该interval放入结果；接下来可能有覆盖，或者直接是情况2，
将newInterval和后面的放到结果后，直接返回。如果是覆盖，或者覆盖到循环结束，或者进入情况2返回结果。

代码如下：
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> result;
        vector<Interval>::iterator i = intervals.begin();
        for(; i < intervals.end(); ++i) {
            if(i->end < newInterval.start) {
                result.push_back(*i);
            }
            else if(i->start > newInterval.end){
                result.push_back(newInterval);  //不再重复，此时先将newInterval中的值放入result中，再将interval后面的也放入result
                result.insert(result.end(), i, intervals.end());  // 如果不再重复，则将后面的都放入result中
                return result;    //返回
            }
            else {
                newInterval.start = min(i->start, newInterval.start);
                newInterval.end = max(i->end, newInterval.end);
            }
        }
        
        result.push_back(newInterval); //防止两种情况：1 intervals里面的每个都小于newInterval且没有覆盖，这样循环最终会退出，
        return result;                 //所以需要最后将newIntervals放进去。2 与newInterval的重复一直到最后，导致循环结束。
    }
};
