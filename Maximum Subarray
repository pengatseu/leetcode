Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.
本题思路：参考剑指offer171页
代码如下：
class Solution {
public:
    int maxSubArray(int A[], int n) {
        if(A == NULL || n <= 0) return 0;  //防御性编程，不过0也可能就是数组的正确结果，所以这里选择0不是很好
        int sum = A[0], result = A[0];  //赋予初始值，比在循环中当i = 0时赋值运行更快
        for(int i = 1; i < n; i++)
        {
            if(sum < 0)  //如果sum小于0，则sum与A[i]相加的结果比A[i]还要小，还不如直接让sum=A[i]，千万不要将其写成sum < A[i]
            {
                sum = A[i];
            }
            else
            {
                sum += A[i];
            }
            
            if(sum > result)
            {
                result = sum;
            }
        }
        
        return result;
    }
};
