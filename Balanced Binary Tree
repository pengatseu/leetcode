Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the
depth of the two subtrees of every node never differ by more than 1.

本题思路参考http://blog.csdn.net/fightforyourdream/article/details/18693131

代码如下
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode *root) {
        if(root == NULL)
            return true;
        if(abs(nodes_depth(root->left)-nodes_depth(root->right)) > 1)
            return false;
        return isBalanced(root->left) && isBalanced(root->right);
    }
private:
    int nodes_depth(TreeNode *root)
    {
        if(root == NULL)
            return 0;
        return 1+max(nodes_depth(root->left),nodes_depth(root->right));
    }
};
