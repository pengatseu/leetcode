Given two sorted integer arrays A and B, merge B into A as one sorted array.

Note:
You may assume that A has enough space (size that is greater or equal to m + n) to hold additional elements from B. 
The number of elements initialized in A and B are m and n respectively.

本题思路：先查找数组b中的值在数组a中的位置，然后移动出该位置放入b中的值

class Solution {
public:
    void merge(int A[], int m, int B[], int n) {
        int crz = 0; //插入值在数组中的位置
        for(int i = 0; i != n; i++)
        {
            crz = search(A, m, B[i]);
            for(int j = m-1; j >= crz; j--)
            {
                A[j+1] = A[j];
            }
            A[crz] = B[i];
            m++; //A数组变长，所以m加1
        }
    }
private:
    int search(const int a[], const int m, const int target)
    {
        int low = 0, height = m-1;
        int mid = 0; //当数组A是空时默认的返回值
        while(low <= height)
        {
            mid = (low+height)/2;
            if(target < a[mid])
            {
                height = mid - 1;
            }
            else if(target > a[mid])
            {
                low = mid + 1;
            }
            else
                return mid;
        }
        return low; //如果没有该数，这low为该值应该插入的位置
    }
};
