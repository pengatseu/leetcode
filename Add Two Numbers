You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

本题类似于Plus One，基本思路跟Plus One那题差不多。该解法不太好，可以到PDF上看看是否有更好的解法。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        int j = 0;
        ListNode *l = new ListNode(0);
        ListNode *temp = l;
        while(l1 || l2)
        {
            if(l1 && l2)
            {
                if((l1->val+l2->val+j) >= 10)
                {
                    l->next = new ListNode((l1->val+l2->val+j) - 10);  
                    j = 1;
                    l = l->next;
                }
                else
                {
                    l->next = new ListNode((l1->val+l2->val+j));  
                    j = 0;
                    l = l->next;     
                }
                l1 = l1->next;
                l2 = l2->next;
            }
            else if(!l1)
            {
                if((l2->val+j) >= 10)
                {
                    l->next = new ListNode((l2->val+j) - 10);  
                    j = 1;
                    l = l->next;
                }
                else
                {
                    l->next = new ListNode((l2->val+j));  
                    j = 0;
                    l = l->next;     
                }
                l2 = l2->next;    
            }
            else if(!l2)
            {
                if((l1->val+j) >= 10)
                {
                    l->next = new ListNode((l1->val+j) - 10);  
                    j = 1;
                    l = l->next;
                }
                else
                {
                    l->next = new ListNode((l1->val+j));  
                    j = 0;
                    l = l->next;     
                }
                l1 = l1->next;    
            }
        }
        if(j == 1)
            l->next = new ListNode(1);
        l = temp->next;
        return l;
    }
};
