Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.

思路：参考http://blog.csdn.net/kenden23/article/details/16980197

代码如下：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
      //  if(head == NULL) return NULL;
        ListNode *first = head, *back = head;
        while(n--)
        {
            first = first->next;
        }
        if(first == NULL) 
        {
            return head->next;
        }
        while(first->next != NULL)
        {
            back = back->next;
            first = first->next;
        }
        back->next = back->next->next;
        return head;
    }
};
