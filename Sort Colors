Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note:
You are not suppose to use the library's sort function for this problem.

click to show follow up.

Follow up:
A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.

Could you come up with an one-pass algorithm using only constant space?
//这里的follow up 的方法是统计数组里面0,1,2各自的数目，然后将这些数目的0,1,2替换原来数组中的所有数，是一种很直接暴力的方法

我这里使用冒泡法的改良版本解决本题，代码如下：
class Solution {
public:
    void sortColors(int A[], int n) {
    for(int i = 0; i != n; i++)
    {
        bool k = false;
        for(int j = n-1; j != i; j--)
        {
            if(A[j] < A[j-1])
            {
                swap_shu(A[j],A[j-1]);
                k = true;
            }    
        }
        if(!k)
        break;
    }
    }
private:
    void swap_shu(int &a, int &b)
    {
        int c;
        c = a;
        a = b;
        b = c;
    }
};
