Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

更好的代码参考http://blog.csdn.net/linhuanmars/article/details/20525681
我的代码如下：
class Solution {
public:
    int search(int A[], int n, int target) {
    int low = 0, height = n-1;
    while(low <= height)
    {
        int mid = (low + height)/2;
        if(A[mid] < A[height])
        {
            int temp = mid, temp_height = height;
            while(mid <= height)
            {
                int mid_r = (mid + height)/2;
                if(target < A[mid_r])
                {
                    height = mid_r - 1;    
                }
                else if(target > A[mid_r])
                {
                    mid = mid_r + 1;
                }
                else
                {
                    return mid_r;
                }
            }
            if(mid > temp_height) //判断是否会在左边的区域
            {
                height = temp - 1; //移动到左边区域
            }
            else
            {
                if(height >= temp)
                return -1;
            }
        }
        else
        {
            int temp = mid, temp_low = low;
            while(mid >= low)
            {
            
                int mid_l = (mid + low)/2;
                if(target < A[mid_l])
                {
                    mid = mid_l - 1;    
                }
                else if(target > A[mid_l])
                {
                    low = mid_l + 1;
                }
                else
                {
                    return mid_l;
                }
            }
            if(mid < temp_low)
            {
                low = temp + 1;
            }
            else
            {
                if(low <= temp)
                return -1;
            }
        }
    }
    return -1;
    }
};
