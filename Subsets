Given a set of distinct integers, S, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If S = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

本题主要参考了http://www.cnblogs.com/TenosDoIt/p/3451902.html
             http://blog.csdn.net/u012118523/article/details/24884803以及PDF

本题主要思路：因为要求子集中元素非递减序排列，因此我们先要对原来的集合进行排序。原集合中每一个元素在子集中有两种状态：
要么存在、要么不存在。这样构造子集的过程中每个元素就有两种选择方法：选择、不选择，因此可以构造一颗二叉树，利用广度优先
搜索算法遍历叶子。注意每次回到上一层时需要将当前层数字pop出（故最好先不选择该层数字，后再选择该层数字）。

另外，本题最精妙的解法为二进制法，具体实现可以参考pdf和上面的链接

代码如下：
class Solution {
public:
    vector<vector<int> > subsets(vector<int> &S) {
    sort(S.begin(),S.end());
    vector<vector<int> > result;
    vector<int> yezhi;
    dfs_search(result, S, 0, yezhi);
    return result;
    }
private:
    void dfs_search(vector<vector<int> > &result, vector<int> &s, int floor, vector<int> &yz) //floor表示到达哪一层，yz表示叶子
    {
        if(floor == s.size())
        {
            result.push_back(yz);
            return;
        }
        dfs_search(result, s, floor+1, yz);  //先遍历不选择的情况，此时由于不选择数字，所以不需要有任何动作
        yz.push_back(s[floor]);   //开始遍历选择的情况，此时将该层数字放入进去
        dfs_search(result, s, floor+1, yz);
        yz.pop_back();  //回到上一层时需要将当前层数字pop出
    }
};
