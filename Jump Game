


一开始的思路：类似于动态规划，将所有的可能的跳跃方法列出来，但是时间复杂度很高。
class Solution {
public:
    bool canJump(vector<int>& nums) {
        return jump_fun(nums, 0, nums[0], nums.size()-1); 
    }
    bool jump_fun(vector<int>& nums, int index, int jump, int length)
    {
//        if(jump == 0) return false;
        index += jump;
        if(index >= length) return true;
        while(jump--)
        {
            int next_jump = nums[index];  
            bool result = jump_fun(nums, index, next_jump, length);
             --index;
             if(result == true) return true;
        }
        return false;
    }
};
