Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this in place with constant memory.

For example,
Given input array A = [1,1,2],

Your function should return length = 2, and A is now [1,2].
我的一开始思路：从后开始移动，但是时间复杂度比较高
class Solution {
public:
    int removeDuplicates(int A[], int n) {
        int front;
        int back;
        int count = 0;
        for(int i = n-1; i > 0; --i)
        {
            back = i;
            front = i-1;
            if(A[front] == A[back])
            {
                ++count;
                for(int j = front; j < n-count; ++j)
                {
                    A[j] = A[j+1];
                }
            }
        }
        return n-count;
    }
};

参考更好的思路http://blog.csdn.net/havenoidea/article/details/12871613
class Solution {
public:
    int removeDuplicates(int A[], int n) {
        if(n == 0) return 0;
        int num = 0;
        for(int i = 1; i < n; ++i)
        {
            if(A[i] != A[num])
            {
                A[++num] = A[i];
            }
        }
        return num+1;
    }
};
