Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
本题思路：先将链表按节点的奇偶性拆开，将所有的奇节点连接成一个链表，将所有的偶节点连接成一个链表。
接着将所有的奇节点链表依次插入偶节点链表中就可以。
代码如下：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *swapPairs(ListNode *head) {
        if(head == NULL || head->next == NULL)
            return head;
        ListNode *odd_link = head;
        ListNode *dou_link = head->next; //保存第二个节点
        
        odd_link->next = dou_link->next; //首先连接第一个节点和第三个节点，相当于初始化，也可以防止链表只有两个节点的情况
        
        ListNode *cur_odd = dou_link->next;  //将当前奇节点移到第三个节点上
        ListNode *cur_dou = dou_link;
        while(cur_odd != NULL)  
        {
            cur_dou->next = cur_odd->next;
            cur_dou = cur_dou->next;
            if(cur_dou != NULL)   //防止总节点数为奇数个的情况
            {
                cur_odd->next = cur_dou->next;
                cur_odd = cur_odd->next;
            }
            else
            {
                cur_odd = cur_odd->next;   //原链表中有奇数个节点
            }
        }
        
        cur_odd = odd_link;
        cur_dou = dou_link;
        ListNode *next_odd = cur_odd->next;
        ListNode *next_dou = cur_dou->next;
        while(next_odd != NULL && next_dou != NULL)
        {
            cur_dou->next = cur_odd; 
            cur_odd->next = next_dou;
            cur_dou = next_dou;
            cur_odd = next_odd;
            next_dou = next_dou->next;
            next_odd = next_odd->next;
        }
        cur_dou->next = cur_odd;  // 不管最后有next_odd节点存在不存在，都是要这样收尾
        
        return dou_link;
    }
};
