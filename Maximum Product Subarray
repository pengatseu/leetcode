Find the contiguous subarray within an array (containing at least one number) which has the largest product.

For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6.
本题思路：参考http://blog.csdn.net/linhuanmars/article/details/39537283，动态规划（可以看看知乎上关注的一个话题）
代码如下：
class Solution {
public:
    int maxProduct(int A[], int n) {
        if(A == NULL || n <= 0) return 0;
        int max_local = A[0], min_local = A[0];
        int max = A[0];
        for(int i = 1; i < n; i++)
        { 
            int max_copy = max_local; //切记一定要保存max_local,因为在下面max_local改变了，所以在 min_local中只能使用max_local的复制max_copy
            max_local = Max(Max(max_local*A[i], A[i]), min_local*A[i]);
            min_local = Min(Min(max_copy*A[i], A[i]), min_local*A[i]);
            if(max_local > max)
                max = max_local;
        }
        
        return max;
    }
    int Max(int a, int b)
    {
        return a>b?a:b;
    }
    int Min(int a, int b)
    {
        return a<b?a:b;
    }
};
