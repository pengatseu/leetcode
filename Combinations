Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

代码如下：
class Solution {
public:
    vector<vector<int> > combine(int n, int k) {
        vector<vector<int> > result;
        vector<int> temp;
        np_stack(result, temp, 1, n, k);
        return result;
    }
private:
    void np_stack(vector<vector<int> > &result, vector<int> &temp, int step, int n, int k)
    {
            if(k == 0)
            {
                result.push_back(temp);
                return;
            }
            for(int i = step; i <= n; i++)
            {
                temp.push_back(i);
                if((k-1) >= 0)
                {
                    np_stack(result, temp, i + 1, n, k-1);  //第三个参数不要写成step+1，因为step在同一堆栈层中是不变的，而i是变的
                                                              //，所以当i变为2时，下一堆栈的step要变为i+1 = 3，而不是step+1 = 2。
                }
                temp.pop_back();
            }
    }
};
