Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.

confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.


OJ's Binary Tree Serialization:
The serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.

Here's an example:
   1
  / \
 2   3
    /
   4
    \
     5
The above binary tree is serialized as "{1,2,3,#,#,4,#,#,5}".


本题代码如下
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode *root) {
        if(!root) return true;  //当root为空，认为是对称的
        return compare(root->left,root->right); //在root不为空时，需要对称比较
    }
private:
    bool compare(TreeNode *left, TreeNode *right)
    {
        if(!left && !right) return true;  //当两边对称都为空时，则返回true，此时会继续进行迭代，直到有false或者全部比较完
        if(!left || !right) return false; //当对称的两边不同时为空时，则返回false，此时迭代不会进行了，false会一直返回，直到结束
        return left->val == right->val && compare(left->left, right->right) && compare(left->right, right->left);
    }
};
